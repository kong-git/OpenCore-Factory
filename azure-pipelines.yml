# OC Release
trigger: none
pr: none

schedules:
- cron: "0 */8 * * *"
  displayName: Schedule Build
  branches:
    include:
    - master
  always: true

variables:
  BuildCheck: 'False'
  FORCE_INSTALL: 1
  BUILD_UTILITIES: 1
  DEBUG: 0

pool:
  vmImage: 'macOS-10.14'

steps:

- task: Bash@3
  displayName: Prepare Pipelines
  inputs:
    targetType: 'inline'
    script: |
      #!/bin/bash
      UserPlusRepo=$(Build.Repository.Name)
      Repo=${UserPlusRepo#*/}
      echo "##vso[task.setvariable variable=REPO]$Repo"
      if [[ $(Build.SourceBranch) != 'refs/heads/master' ]]; then
          echo "##vso[task.setvariable variable=DEBUG]1"
          echo "DEBUG"
      fi

- task: Bash@3
  displayName: Check Changes
  inputs:
    targetType: 'inline'
    script: |
      #!/bin/bash
      BD="$(date +"%Y-%m-%d")" # Build Date
      echo "##vso[task.setvariable variable=BuildDate]$BD"
      cd ../b || exit 1
      mkdir "RepoOperation"
      cd "RepoOperation" || exit 1
      git clone "$(Build.Repository.Uri).git"
      if [[ $DEBUG == 1 ]]; then
        cd $(REPO) || exit 1
        git checkout $(Build.SourceBranchName)
        cd ../
      fi

      # Clean SHA History Folder
      if [[ "$(basename "$(REPO)"/Commits/20*)" != "$BD" ]]; then
        rm -rf "$(REPO)"/Commits/20*
        mkdir "$(REPO)"/Commits/"$BD"
        cp "$(REPO)"/Commits/*.sha1 "$(REPO)"/Commits/"$BD"
      fi

      # Check and Update commit SHA
      function CPSHA() {

        local Latest="$(git ls-remote https://github.com/acidanthera/"${2}"Pkg.git HEAD | cut -c1-40)"
        local Previous="$(<"$(REPO)"/Commits/"${1}".sha1)"
        local Tdy="$(<"$(REPO)"/Commits/"$BD"/"${1}".sha1)"

        # Store todays commits for later usage. Dir parallel with RepoOperation, under ./b
        echo "${1}cmt=$Tdy" >> ../TdyCommit

        if [[ "$Previous" != "$Latest" ]]; then
            rm -rf "$(REPO)"/Commits/"${1}".sha1
            echo "Changes found in ${2}Pkg"
            echo "$Latest" >> "$(REPO)/Commits/"${1}".sha1"
            echo "##vso[task.setvariable variable=BuildCheck]True"
        else
            echo "${2}Pkg up to date"
        fi

        echo "Latest: $Latest"
        echo "Previous: $Previous"
        echo "Tdy: $Tdy"

        printf "\n"
      }
      
      CPSHA OC OpenCore
      CPSHA Efi Efi
      CPSHA MI MacInfo
      #CPSHA ASP AppleSupport

      cat ../TdyCommit

- task: Bash@3
  condition: or(eq(variables['BuildCheck'], 'True'), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
  displayName: Build OpenCorePkg
  inputs:
    targetType: 'inline'
    script: |
      #!/bin/bash
      cd ../b
      git clone --depth=30 https://github.com/acidanthera/OpenCorePkg.git
      cd OpenCorePkg

      # Patch Build Tool

      curl -# -L -O "https://raw.githubusercontent.com/acidanthera/ocbuild/master/efibuild.sh"
      chmod +x efibuild.sh
      
      sed -i -e 's/--depth=1/--depth=30/g' efibuild.sh
      sed -i -e 's/.dsc"/.dsc" \| xcpretty/g' efibuild.sh
      sed -i -e 's/updaterepo "https\:\/\/github.com\/acidanthera\/audk" UDK master || exit 1/git clone https\:\/\/github.com\/acidanthera\/audk --depth=1 UDK || exit 1/' efibuild.sh
      sed -i -e 's/src=.*/src=\$\(cat efibuild.sh\) \&\& eval \"\$src\" \|\| exit 1/g' macbuild.tool
      sed -i -e 's/ARCHS=.*/ARCHS=\(X64\)/g' macbuild.tool

      ./macbuild.tool

#- task: Bash@3
#  condition: or(eq(variables['BuildCheck'], 'True'), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
#  displayName: Build AppleSupportPkg
#  inputs:
#    targetType: 'inline'
#    script: |
#      #!/bin/bash
#      cd ../b/OpenCorePkg/UDK/
#      git clone --depth=30 https://github.com/acidanthera/AppleSupportPkg.git
#      cd AppleSupportPkg
#
#      # Patch Build Tool
#      ## Patch efibuild.sh
#      cp ../../efibuild.sh .
#      sed -i -e 's/ln -s ..\/UDK/ln -s ..\/../g' efibuild.sh
#      sed -i -e 's/rm -rf UDK//g' efibuild.sh
#      sed -i -e 's/sym=.*/sym=""/g' efibuild.sh
#      sed -i -e 's/git clone https:\/\/github.com\/acidanthera\/audk.*//g' efibuild.sh
#      sed -i -e 's/cd UDK/cd ..\/..\/UDK/g' efibuild.sh
#      sed -i -e 's/ln -s .. ".*/:/g' efibuild.sh
#      sed -i -e 's/cd .. \|/cd $ASPDir \|/g' efibuild.sh # Hope this won't break soon
#
#      ## Patch macbuild.tool
#      sed -i -e 's/"$0")/"$0")\'$'\n''ASPDir=\$PWD/g' macbuild.tool
#      sed -i -e 's/src=.*/src=\$\(cat efibuild.sh\) \&\& eval \"\$src\" \|\| exit 1/g' macbuild.tool
#
#      ./macbuild.tool

- task: CmdLine@2
  condition: and(succeeded(), eq(variables['BuildCheck'], 'True'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  displayName: Move Binaries
  inputs:
    script: |
      cd ../b/OpenCorePkg
      mkdir ../../a/Artifacts

      for Artifact in OpenCore; do #AppleSupport
          for Tgt in DEBUG RELEASE; do
              cp UDK/Build/${Artifact}Pkg/${Tgt}*/X64/${Artifact}*.zip ../../a/Artifacts
          done
      done
      ls $(Build.ArtifactStagingDirectory)/Artifacts

- task: Bash@3
  condition: and(succeeded(), or(eq(variables['BuildCheck'], 'True'), ne(variables['Build.SourceBranch'], 'refs/heads/master')))
  displayName: Get Commit Notes
  inputs:
    targetType: 'inline'
    script: |
      #!/bin/bash
      eval $(cat "${PWD}/../b/TdyCommit")
      ToMD="$(pwd)/../a/ReleaseNotes.md"

      echo "## Changes" >> $ToMD

      cd ../b/OpenCorePkg/UDK || exit 1

      # Get Commit Notes as Release Notes
      function GNotes() {

        cd "${2}"Pkg || exit 1

        local Count="$(git rev-list --count $(eval echo \$"${1}"cmt)..HEAD)"

        if [[ "$Count" != 0 ]]; then
          local Note="$(git log -"$Count" --format=" - %s %n")"
          echo "Got $Count Notes from ${2}Pkg"
          echo "### ${2}Pkg" >> $ToMD || exit 1
          echo "$Note" >> $ToMD || exit 1
        fi
        cd ../
      }

      GNotes OC OpenCore
      GNotes Efi Efi
      GNotes MI MacInfo
      #GNotes ASP AppleSupport

      # Reformat Release Notes
      ## Exclude unnecessary links
      sed -i -e $'s/http.*//g' $ToMD
      sed -i -e '/^$/d' $ToMD
      cat $ToMD

- task: CmdLine@2
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['BuildCheck'], 'True'))
  displayName: Refresh Commits
  inputs:
    script: |
      git config --global credential.helper store
      echo https://$(PAT):x-oauth-basic@github.com >> ~/.git-credentials
      git config --global user.email $(Email)
      git config --global user.name $(User)
      cd ../b/RepoOperation/$(REPO)
      git add .
      git commit -m "Refresh Commits to $(BuildDate)"
      git push origin master

# Gitee Sucks!!
#- task: CmdLine@2
#  condition: eq(variables['BuildCheck'], 'True')
#  displayName: Publish Gitee Mirror
#  inputs:
#    script: |
#      rm -rf ~/.gitconfig
#      rm -rf ~/.git-credentials
#      git config --global credential.helper store
#      git config --global user.email $(Email)
#      git config --global user.name $(User)
#      cd ../b
#      git clone https://williambj1:$(GiteePAT)@gitee.com/williambj1/$(REPO).git
#      cd $(REPO)
#      rm -rf OpenCore-Build/*
#      cp -R $(Build.ArtifactStagingDirectory)/Artifacts/OpenCore*.zip OpenCore-Build
#      cp -R $(Build.ArtifactStagingDirectory)/ReleaseNotes.md OpenCore-Build
#      mv OpenCore-Build/ReleaseNotes.md OpenCore-Build/README.md
#      git add .
#      git commit -m "OpenCore-Build-$(BuildDate)"
#      git push origin master

- task: GitHubRelease@0
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['BuildCheck'], 'True'))
  displayName: 'Publish GitHub Release'
  inputs:
    gitHubConnection: release
    repositoryName: '$(Build.Repository.Name)'
    action: 'edit'
    target: '$(Build.SourceVersion)'
    tagSource: 'manual'
    tag: '$(BuildDate)'
    title: '$(BuildDate)'
    releaseNotesFile: '$(Build.ArtifactStagingDirectory)/ReleaseNotes.md'
    assets: '$(Build.ArtifactStagingDirectory)/Artifacts/*.zip'
    addChangeLog: false
    isPreRelease: true
